#!/usr/bin/env python3

import time
import sys
from pathlib import Path
import logging

# TODO: Use a different scale if noise-canceling headphones are connected or if
# it's loud around us (detect using microphone).

# (enable_temp, pwm): increase to pwm if > enable_temp, decrease to pwm if < enable_temp
CPU_MAP = [(0, 0),
           (45, 0),
           (65, 40),
           (70, 120),
           (75, 255)]
# PWM:RPM
# 30:0
# 35:4500
# 80:4800
# 255:8000

INTERVAL=1
CPU_TEMP_HIST_MAX = 60/INTERVAL
CPU_TEMP_HIST = list()

def get_cpu_pwm(cpu_level):
    global CPU_TEMP_HIST_MAX
    global CPU_TEMP_HIST

    # In DegC.
    # CPU_PATH = list(Path('/').glob('sys/devices/platform/thinkpad_hwmon/hwmon/hwmon*/temp1_input'))[0]
    CPU_PATH = list(Path('/').glob('sys/devices/platform/coretemp.0/hwmon/hwmon*/temp1_input'))[0]
    curr_temp = int(CPU_PATH.read_text()) / 1000

    # Average out temperature spikes over N seconds (CPU_TEMP_HIST_MAX * INTERVAL).
    CPU_TEMP_HIST.append(curr_temp)
    if len(CPU_TEMP_HIST) > CPU_TEMP_HIST_MAX:
        CPU_TEMP_HIST.pop(0)
    temp = sum(CPU_TEMP_HIST)/len(CPU_TEMP_HIST)

    # Increase the speed if the average temp. reaches the enable-temperature of
    # the next level.
    if temp >= CPU_MAP[cpu_level][0]:
        for (l,(t,p)) in enumerate(CPU_MAP):
            if temp >= t:
                cpu_level = l

    # Only reduce level if we are below the lower level's enable_temp. This
    # prevents the fan from spinning up/down too frequently.
    if temp < CPU_MAP[cpu_level][0]:
        for (l,(t,p)) in reversed(list(enumerate(CPU_MAP))):
            if temp < t:
                cpu_level = l

    return cpu_level, curr_temp, temp, CPU_MAP[cpu_level][1]


def get_nvme_pwm():
    # /sys/devices/pci0000:00/0000:00:06.0/0000:04:00.0/nvme/nvme0/hwmon3/temp1_crit
    NVME_PATH = list(Path('/').glob('sys/devices/pci0000:00/0000:00:06.0/0000:04:00.0/nvme/nvme0/hwmon*/'))[0]
    NVME_MAX = int(NVME_PATH.joinpath("temp1_max").read_text()) / 1000
    NVME_CRIT = int(NVME_PATH.joinpath("temp1_crit").read_text()) / 1000

    temp = int(NVME_PATH.joinpath("temp1_input").read_text()) / 1000

    # Very primitive, should never trigger anyway.
    pwm = 0
    crit = False
    if temp >= NVME_MAX-10:
        pwm = 40
    if temp >= NVME_MAX:
        pwm = 255
    if temp >= NVME_CRIT-5:
        pwm = 255
        crit = True

    return temp, pwm, crit

# Does not provide benefit.
#
# RPM_INTERVAL=0.1
# FAN_PATH = list(Path('/').glob('sys/devices/platform/thinkpad_hwmon/hwmon/hwmon*/fan1_input'))[0]
#
# def set_rpm(target_rpm, target_time, last_pwm):
#     elapsed = 0
#     pwm = last_pwm
#     delta = 1
#     while elapsed < target_time:
#         rpm = int(FAN_PATH.read_text())
#         if rpm < target_rpm:
#             pwm = min(255, pwm + delta)
#         if rpm > target_rpm:
#             pwm = max(0, pwm - delta)
#         PWM_PATH.write_text(str(pwm))
#         time.sleep(RPM_INTERVAL)
#         elapsed += RPM_INTERVAL
#     return pwm

def pwm_loop():
    MAX_PWM_DELTA = 20

    cpu_level = 0
    last_pwm = 30

    while True:
        cpu_level, cpu_temp, cpu_avg_temp, cpu_pwm = get_cpu_pwm(cpu_level)
        nvme_temp, nvme_pwm, nvme_crit = get_nvme_pwm()

        pwm = max(cpu_pwm, nvme_pwm)

        # Limit rate of pwm increase to prevent over-compensation. Fanspeed can
        # not change as fast anyway. Rarely triggers as average temp. does not
        # change quickly anyway.
        max_pwm = last_pwm + MAX_PWM_DELTA
        if pwm > max_pwm and not nvme_crit:
            pwm = max_pwm

        logging.info("cpu %d°C %d°C %dpwm, nvme %d°C %dpwm => %dpwm" % (cpu_temp, cpu_avg_temp, cpu_pwm, nvme_temp, nvme_pwm, pwm))

        # Doing this once is enough, but it has to be repeated after the system
        # went to standby. Therefor just do it always.
        PWM_PATH = list(Path('/').glob('sys/devices/platform/thinkpad_hwmon/hwmon/hwmon*/pwm1'))[0]
        PWM_ENABLE_PATH = list(Path('/').glob('sys/devices/platform/thinkpad_hwmon/hwmon/hwmon*/pwm1_enable'))[0]
        PWM_ENABLE_PATH.write_text("1")
        PWM_PATH.write_text(str(pwm))
        last_pwm = pwm

        time.sleep(INTERVAL)

def main() -> int:
    logging.basicConfig(level=logging.DEBUG)

    try:
        pwm_loop()
    finally:
        logging.info("pwm_enable := 0")
        PWM_ENABLE_PATH.write_text("0")

    return 0

if __name__ == '__main__':
    sys.exit(main())
